<%
const {declaration, md} = it
%>

<!-- Signature -->
<p>
    <b>
        <code>
            <%= declaration.isAsync ? 'async' : '' %>

            function <%= declaration.name || '' %>

            <!-- Type Parameters -->
            <% ~ includeFile('type-params', {typeParameters: declaration.typeParameters}) %>

            <%= declaration.isGenerator ? '*' : '' %>
            <!-- Parameters -->
            (
            <%
            declaration.parameters.forEach(function (param, index) { %>
                <% let last = !(index < declaration.parameters.length - 1) %>

                <br>
                &nbsp;&nbsp;

                <%= param.isReadonly ? 'readonly' : '' %>
                <%= param.isRestParameter ? '...' : '' %>

                <!-- parameter name -->
                <%= param.name %>

                <%= param.hasQuestionToken ? '?' : '' %>

                <!-- type -->
                :
                <%= param.type %>

                <!-- Default value -->
                <% if (param.initializer) { %>
                = <%= param.initializer %>
                <% } %>

                <!-- Comma if not last -->
                <% ~ !last ? ', ' : '' %>
            <% }) %>
            <% if (declaration.parameters.length > 0) { %>
                <br>
            <% } %>
            )

            <!-- Return type -->
            :
            <%= declaration.returnType || 'any' %>
        </code>
    </b>
</p>

<!-- Docs -->
<% ~ includeFile('docs', {docs: declaration.docs, md}) %>
